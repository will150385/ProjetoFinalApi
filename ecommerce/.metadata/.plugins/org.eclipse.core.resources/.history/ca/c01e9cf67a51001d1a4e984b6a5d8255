package com.serratec.ecommerce.ecommerce.service;

import java.io.IOException;
import java.util.List;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.serratec.ecommerce.ecommerce.dto.ProdutoDTO;
import com.serratec.ecommerce.ecommerce.dto.imgbb.ImgBBDTO;
import com.serratec.ecommerce.ecommerce.model.Produto;
import com.serratec.ecommerce.ecommerce.repository.ProdutoRepository;
import com.serratec.ecommerce.ecommerce.service.exceptions.DatabaseExcption;
import com.serratec.ecommerce.ecommerce.service.exceptions.ResourceNotFoundException;



@Service
public class ProdutoService {

  @Autowired
  private ProdutoRepository produtoRepository;

  public ProdutoDTO findById(Long id) {

    Produto produto = produtoRepository.findById(id)
        .orElseThrow(() -> new ResourceNotFoundException("Product not found"));
    ProdutoDTO dto = new ProdutoDTO(produto);
    return dto;

  }

  public List<ProdutoDTO> findAll() {
    List<Produto> result = produtoRepository.findAll();
    return result.stream().map(x -> new ProdutoDTO(x)).toList();
  }

  @Transactional
  public ProdutoDTO insert(ProdutoDTO productDto) {

    Produto entity = new Produto();
    copyDtoToEntity(productDto, entity);
    entity = produtoRepository.save(entity);
    return new ProdutoDTO(entity);
  }

  public ProdutoDTO update(ProdutoDTO productDto, Long id) {

    try {
      Produto entity = new Produto();
      copyDtoToEntity(productDto, entity);
      entity = produtoRepository.save(entity);
      return new ProdutoDTO(entity);

    } catch (

    EntityNotFoundException e) {
      throw new ResourceNotFoundException("Recurso nao encontrado");

    }

  }

  // @Transactional(propagation = Propagation.SUPPORTS)
  public void deleteById(Long id) {

    try {
      produtoRepository.deleteById(id);

    } catch (EmptyResultDataAccessException e) {
      throw new ResourceNotFoundException("Recurso nao encontrado");
    } catch (DataIntegrityViolationException e) {
      throw new DatabaseExcption("Falha de integridade Referencial");
    }

  }

  private void copyDtoToEntity(ProdutoDTO productDto, Produto entity) {

    entity.setNome(productDto.getNome());
    entity.setDataCadastro(productDto.getDataCadastro());
    entity.setQtdEstoque(productDto.getQtdEstoque());
    entity.setValorUnitario(productDto.getValorUnitario());
  }
  public ProdutoDTO saveprodutoFoto(String produtoTxt,
			MultipartFile file) throws IOException {
		
		RestTemplate restTemplate = new RestTemplate();
		String serverUrl = imgBBHostUrl + imgBBHostKey; /*pode mudar dependendo dos site*/
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.MULTIPART_FORM_DATA);
		
		MultiValueMap<String, String> fileMap = new LinkedMultiValueMap<>();
		
		ContentDisposition contentDisposition = ContentDisposition
				.builder("form-data")
				.name("image")/*ponto mais importante*/
				.filename(file.getOriginalFilename())
				.build();
		
		fileMap.add(HttpHeaders.CONTENT_DISPOSITION, contentDisposition.toString());
		
		HttpEntity<byte[]> fileEntity = new HttpEntity<>(file.getBytes(), fileMap);
		
		MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
		body.add("image", fileEntity);
		
		HttpEntity<MultiValueMap<String, Object>> requestEntity =
				new HttpEntity<>(body, headers);
		
		ResponseEntity<ImgBBDTO> response = null;
		ImgBBDTO imgDTO = new ImgBBDTO();
		Produto novoProduto = new Produto(); 
		try {
			response = restTemplate.exchange(
					serverUrl,
					HttpMethod.POST,
					requestEntity,
					ImgBBDTO.class);
			
			imgDTO = response.getBody();
			System.out.println("ImgBBDTO: " + imgDTO.getData().toString());
		} catch (HttpClientErrorException e) {
			e.printStackTrace();
		}
		
		//Converte os dados da editora recebidos no formato String em Entidade
		//  Coleta os dados da imagem, após upload via API, e armazena na Entidade Editora
		if(null != imgDTO) {
			Produto produtoFromJson = convertProdutoFromStringJson(produtoTxt);
			produtoFromJson.setImagemFileName(imgDTO.getData().getImage().getFilename());
			produtoFromJson.setImagemNome(imgDTO.getData().getTitle());
			produtoFromJson.setImagemUrl(imgDTO.getData().getUrl());
			novoProduto = produtoRepository.save(produtoFromJson);
		}
		
		return toDTO(novoProduto);
	}
	
	private Produto convertProdutoFromStringJson(String produtoJson) {
		Produto produto = new Produto();
		
		try {
			ObjectMapper objectMapper = new ObjectMapper();
			produto = objectMapper.readValue(produtoJson, Produto.class);
		} catch (IOException err) {
			System.out.printf("Ocorreu um erro ao tentar converter a string json para um instância da entidade Editora", err.toString());
		}
		
		return produto;
	}
	@Value("${imgbb.host.url}")
	private String imgBBHostUrl;
	
	@Value("${imgbb.host.key}")
    private String imgBBHostKey;

}